@page "/"
@using CalendarApp.Classes
@inject IJSRuntime JSRuntime

<h1 class="H">Holidays in the Next 7 Days</h1>
<table class="Table">
    <thead class="Thead">
        <tr>
            <th>Dayname and Dates</th>
            <th>Events</th>
            <th>Work Logs</th>
        </tr>
    </thead>
    <tbody class="Tbody">
        @for (int days = 0; days <= 6; days++)
        {
            <tr>
                <td>@date.currentdate.AddDays(days).ToLongDateString()</td>
                <td>
                    
                    @foreach (var holiday in holidays)
                    {
                        DateTime eventday = holiday.Start.Date;
                        DateTime currentDay = date.currentdate.AddDays(days).Date;
                        if (eventday == currentDay)
                        {
                            @holiday.Event<br />
                        }
                    }
                    @foreach (var birthday in Birthdays)
                    {
                        DateTime Bday = birthday.Birthday.Date;
                        DateTime currentDay = date.currentdate.AddDays(days).Date;
                        if (Bday.Month == currentDay.Month && Bday.Day == currentDay.Day)
                        {
                            @($"{birthday.FName} {birthday.Lname}'s Birthday.")<br />
                        }
                    }
                </td>
                <td>

                    @if (!worklog.IsOpen)
                    {
                        <button class="btn btn-primary" @onclick="()=>OpenWorklog(date.currentdate.AddDays(days))">Open</button>
                    }
                    else
                    {
                        @foreach (var work in workLogs)
                        {
                            DateTime workday = work.Cday.Date;
                            DateTime currentDay = date.currentdate.AddDays(days).Date;
                            if (work.Cday.Month == currentDay.Month && work.Cday.Day == currentDay.Day && work.Cday.Year == currentDay.Year)
                            {
                                <div>
                                    @if (!open)
                                    {

                                    @($"{work.FName} {work.LName}") <button class="btn btn-primary" @onclick="() => worklogs()">worklogs</button> <br />

                                    }
                                    else
                                    {
                                    if (!opendesc)
                                    {
                                    @($"they started at_{work.StartTime.ToShortTimeString()}_ with_{work.Title}_and stopped at_{work.EndTime.ToShortTimeString()}")<button class="btn btn-primary" @onclick="() => odesc()">Description</button><br />
                                    }
                                    else
                                    {
                                    @($"{work.Descs}")<br />
                                    }
                                    }



                                    <button class="btn btn-primary" @onclick="()=>close()">Close</button>
                                </div>
                        }
                    }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    string FName;
    string Lname;
    DateTime Bday;
    int Pid;
    Date date = new Date();
    Api apis = new Api();
    Sql sql = new Sql();
    Person person = new Person();
    workLog worklog = new workLog();
    bool open = false;
    bool opendesc = false;

    private void UpdatePerson()
    {
        sql.SqlAdd(person);
        LoadBirthdays();
    }
    private void close()
    {
        worklog.IsOpen = false;
        open = false;
        opendesc = false;
    }
    private void OpenWorklog(DateTime selectedDate)
    {
        worklog.IsOpen = true;
    }
    private void worklogs()
    {
        open = true;
    }
    private void odesc()
    {
        opendesc = true;
    }
    private List<workLog> workLogs = new List<workLog>();
    private List<Person> Birthdays = new List<Person>();
    private List<Holiday> holidays = new List<Holiday>();
    private bool holidaysLoaded = false;
    private bool BirthdaysLoaded = false;
    private bool WorkLogsLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        if (!BirthdaysLoaded)
        {
            await LoadBirthdays();
            BirthdaysLoaded = true;
        }
        if (!holidaysLoaded)
        {
            await LoadHolidays();
            holidaysLoaded = true;
        }
        if (!WorkLogsLoaded)
        {
            await LoadWorkLogs();
            WorkLogsLoaded = true;
        }
    }

    private async Task LoadHolidays()
    {
        holidays = await Api.GetHolidays();
    }

    private async Task LoadBirthdays()
    {
        Birthdays = await Sql.SqlSelect();
    }

    private async Task LoadWorkLogs()
    {
        workLogs = await Sql.selectworklog();
    }
}
